import glob
import subprocess
import chardet

hs = glob.glob('../core/**/*.h', recursive=True)
cpps = glob.glob('../core/**/*.cpp', recursive=True)
#mm = glob.glob('../core/**/*.mm', recursive=True)

# targets = hs + cpps + mm

targets = hs + cpps

for p in targets:
    # special case
    if 'AutoGeneratedCoreWrapper.cpp' in p:
        continue

    formatted = subprocess.check_output(['clang-format', '-style=file', p]).decode().replace('\ufeff','')

    with open(p, 'rb') as f:
        enc = chardet.detect(f.read())['encoding']

    f = open(p, 'r', encoding=enc)
    original = f.read()
    f.close()

    if(formatted != original):
        print('{} is not formatted.'.format(p))
        raise Exception(p)
    